@page "/"
@inject IJSRuntime JS
@inject ISudokuValidator SudokuValidator

<PageTitle>Sudoku - Empty Grid</PageTitle>

<h1>Empty Grid</h1>

<div class="grid-container">
    <div class="grid">
        @for(int x = 0; x < 9; x++) {
            <div class="column">
                @for (int y = 0; y < 9; y++) {
                    <SudokuCell Cell="Grid[x, y]" SetValue="SetValue" ChangeFocus="ChangeFocus" ValidationState="GridState" />
                }
            </div>
        }
    </div>
    <div class="grid-actions">
        @for(int x = 1; x < 10; x++) {
            <SudokuAction Action="@x.ToString()" TriggerAction="NumberEntered" />
        }
    </div>
    <div class="grid-actions">
        <SudokuAction Size="large" Action="Delete" TriggerAction="Delete" />
        <SudokuAction Size="large" Action="Check Grid" TriggerAction="CheckGridState" />
    </div>
</div>

@code {
    public Cell[,] Grid { get; set; } = new Cell[9, 9];
    public Cell? FocusedCell { get; set; } = null;
    public SudokuValidationState GridState { get; set; } = SudokuValidationState.Incomplete;

    protected override void OnInitialized()
    {
        for(int x = 0; x < 9; x++) {
            for (int y = 0; y < 9; y++) {
                Grid[x, y] = new Cell(x, y);
            }
        }
    }
        
    public async void SetValue(int? value)
    {
        await JS.InvokeVoidAsync("console.log", $"From parent {value}");
    }
    
    public void ChangeFocus(CellFocusEvent value)
    {
        if (FocusedCell != null) {
            FocusedCell.Focused = false;
        }

        if (value.ChangeEvent == null) {
            FocusedCell = value.Cell;
            FocusedCell.Focused = true;
            return;
        }
        
        int rowToFocus = value.Cell.Row;
        int columnToFocus = value.Cell.Column;

        switch(value.ChangeEvent) {
            case "ArrowUp":
                rowToFocus--;
                break;
            case "ArrowDown":
                rowToFocus++;
                break;
            case "ArrowLeft":
                columnToFocus--;
                break;
            case "ArrowRight":
                columnToFocus++;
                break;
        }

        if (rowToFocus > 8
        || rowToFocus < 0
        || columnToFocus > 8
        || columnToFocus < 0) {
            return;
        }
        
        var cellToFocus = Grid[columnToFocus, rowToFocus];
        cellToFocus.Focused = true;
        FocusedCell = cellToFocus;
    }

    public async void NumberEntered(string numberAsString)
    {
        if (FocusedCell != null && int.TryParse(numberAsString, out int intValue)) {
            if (intValue > 0 && intValue <= 9) {
                FocusedCell.Value = intValue;
                await InvokeAsync(() => StateHasChanged());
            }
        }
    }

    public async void Delete()
    {
        if (FocusedCell != null) {
            FocusedCell.Value = null;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    public void CheckGridState()
    {
        GridState = SudokuValidator.ValidateSudokuGrid(Grid);
    }
}
