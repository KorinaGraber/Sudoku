@inject IJSRuntime JS

<div class="cell @GetPositionInBlock() @(IsFinished ? "complete " : "")" 
    tabindex="@Cell.Row @Cell.Column" 
    @ref="cellElement" 
    @onkeydown="KeyPressed" 
    @onfocusin=@(e => ChangeFocus.InvokeAsync(new CellFocusEvent { Cell = Cell }))>@Cell.Value</div>

@code {
    private Cell _cell = new Cell(0, 0);
    [Parameter]
    public Cell Cell { 
        get => _cell; 
        set {
            _cell = value;
            if (_cell.Focused) {
                cellElement.FocusAsync();
            }
        }
    }

    [Parameter]
    public bool IsFinished { get; set; } = false;

    [Parameter]
    public EventCallback<int?> SetValue { get; set; }

    [Parameter]
    public EventCallback<CellFocusEvent> ChangeFocus { get; set; }

    private ElementReference cellElement;

    private async void KeyPressed(KeyboardEventArgs args)
    {
        if (int.TryParse(args.Key, out int intValue)) {
            if (intValue > 0 && intValue <= 9) {
                Cell.Value = intValue;
                await SetValue.InvokeAsync(Cell.Value);
            }
        }

        if (args.Key == "Delete" || args.Key == "Backspace") {
            Cell.Value = null;
            await SetValue.InvokeAsync(Cell.Value);
        }
        
        if (args.Key == "ArrowUp" 
        || args.Key == "ArrowDown"
        || args.Key == "ArrowLeft"
        || args.Key == "ArrowRight") {
            await ChangeFocus.InvokeAsync(new CellFocusEvent { Cell = Cell, ChangeEvent = args.Key });
        }
    }

    public string GetPositionInBlock()
    {
        var cellColumnInBlock = Cell.Column % 3;
        var cellRowInBlock = Cell.Row % 3;

        var positionString = "";
        
        if (cellRowInBlock == 0) {
            positionString += "top ";
        }
        
        if (cellRowInBlock == 2) {
            positionString += "bottom ";
        }

        if (cellColumnInBlock == 0) {
            positionString += "left ";
        }
        
        if (cellColumnInBlock == 2) {
            positionString += "right ";
        }

        return positionString;
    }
}